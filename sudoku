from functools import reduce

# Every 3x3 square is indexed where 1_1 is the first square on the first line
sqr1_1 = [4, 9, 6, 0, 0, 8, 7, 5, 0]
sqr1_2 = [0, 7, 0, 9, 0, 3, 8, 0, 2]
sqr1_3 = [0, 0, 0, 0, 0, 0, 0, 1, 9]

sqr2_1 = [0, 0, 0, 0, 0, 1, 8, 0, 7]
sqr2_2 = [0, 0, 0, 7, 2, 0, 0, 9, 0]
sqr2_3 = [0, 2, 5, 4, 9, 0, 3, 6, 0]

sqr3_1 = [0, 8, 0, 0, 6, 0, 0, 0, 0]
sqr3_2 = [0, 0, 7, 0, 5, 4, 2, 8, 9]
sqr3_3 = [9, 0, 0, 0, 3, 0, 1, 5, 6]

# hor is short for horizontal and hor1 means first row and vert is short for vertical or column
hor1 = []
hor2 = []
hor3 = []

hor4 = []
hor5 = []
hor6 = []

hor7 = []
hor8 = []
hor9 = []

vert1 = []
vert2 = []
vert3 = []

vert4 = []
vert5 = []
vert6 = []

vert7 = []
vert8 = []
vert9 = []

sudoku = []
sudoku = [x for x in sqr1_1 + sqr1_2 + sqr1_3 + sqr2_1 + sqr2_2 + sqr2_3 + sqr3_1 + sqr3_2 + sqr3_3 if
          type(x) == int]  # Making a list of all the values if needed to print out

# These lists contains the missing numbers in each 3x3 square. 1_1 means first square
num_list = list(range(1, 10))
num_1_1 = list(set(num_list) - set(sqr1_1))
num_1_2 = list(set(num_list) - set(sqr1_2))
num_1_3 = list(set(num_list) - set(sqr1_3))
num_2_1 = list(set(num_list) - set(sqr2_1))
num_2_2 = list(set(num_list) - set(sqr2_2))
num_2_3 = list(set(num_list) - set(sqr2_3))
num_3_1 = list(set(num_list) - set(sqr3_1))
num_3_2 = list(set(num_list) - set(sqr3_2))
num_3_3 = list(set(num_list) - set(sqr3_3))

for i in range(9):  # Replaces all the zeros with a list containing the missing numbers
    if sqr1_1[i] == 0:
        sqr1_1[i] = num_1_1

    if sqr1_2[i] == 0:
        sqr1_2[i] = num_1_2

    if sqr1_3[i] == 0:
        sqr1_3[i] = num_1_3

    if sqr2_1[i] == 0:
        sqr2_1[i] = num_2_1

    if sqr2_2[i] == 0:
        sqr2_2[i] = num_2_2

    if sqr2_3[i] == 0:
        sqr2_3[i] = num_2_3

    if sqr3_1[i] == 0:
        sqr3_1[i] = num_3_1

    if sqr3_2[i] == 0:
        sqr3_2[i] = num_3_2

    if sqr3_3[i] == 0:
        sqr3_3[i] = num_3_3


# while loop that runs until the sum is the sum of all the nums 1-9 times 9. Meaning the sudoku is complete. 
while sum(sudoku)!=9*reduce(lambda x,y: x+y, range(1,10)):

    #Creating variables hor1(horizontal) and vert1(vertical) for eliminationprocess. Updates each time loop runs
    hor1 = [x for x in (sqr1_1[:3] + sqr1_2[:3] + sqr1_3[:3]) if type(x) == int]
    hor2 = [x for x in (sqr1_1[3:6] + sqr1_2[3:6] + sqr1_3[3:6]) if type(x) == int]
    hor3 = [x for x in sqr1_1[6:] + sqr1_2[6:] + sqr1_3[6:] if type(x) == int]

    hor4 = [x for x in sqr2_1[:3] + sqr2_2[:3] + sqr2_3[:3] if type(x) == int]
    hor5 = [x for x in sqr2_1[3:6] + sqr2_2[3:6] + sqr2_3[3:6] if type(x) == int]
    hor6 = [x for x in sqr2_1[6:] + sqr2_2[6:] + sqr2_3[6:] if type(x) == int]

    hor7 = [x for x in sqr3_1[:3] + sqr3_2[:3] + sqr3_3[:3] if type(x) == int]
    hor8 = [x for x in sqr3_1[3:6] + sqr3_2[3:6] + sqr3_3[3:6] if type(x) == int]
    hor9 = [x for x in sqr3_1[6:] + sqr3_2[6:] + sqr3_3[6:] if type(x) == int]

    vert1 = [x for x in sqr1_1[::3] + sqr2_1[::3] + sqr3_1[::3] if type(x) == int]
    vert2 = [x for x in sqr1_1[1::3] + sqr2_1[1::3] + sqr3_1[1::3] if type(x) == int]
    vert3 = [x for x in sqr1_1[2::3] + sqr2_1[2::3] + sqr3_1[2::3] if type(x) == int]

    vert4 = [x for x in sqr1_2[::3] + sqr2_2[::3] + sqr3_2[::3] if type(x) == int]
    vert5 = [x for x in sqr1_2[1::3] + sqr2_2[1::3] + sqr3_2[1::3] if type(x) == int]
    vert6 = [x for x in sqr1_2[2::3] + sqr2_2[2::3] + sqr3_2[2::3] if type(x) == int]

    vert7 = [x for x in sqr1_3[::3] + sqr2_3[::3] + sqr3_3[::3] if type(x) == int]
    vert8 = [x for x in sqr1_3[1::3] + sqr2_3[1::3] + sqr3_3[1::3] if type(x) == int]
    vert9 = [x for x in sqr1_3[2::3] + sqr2_3[2::3] + sqr3_3[2::3] if type(x) == int]

    for x in range(9):
        if type(sqr1_1[x]) == list:  # Check if the datatype is a list
            if len(sqr1_1[x]) == 1:  # Check if there is only one number left
                sqr1_1[x] = sqr1_1[x][0]  # If so, then replace the list with that single value
            elif len(sqr1_1[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert1 + hor1))
                elif x == 1:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert2 + hor1))
                elif x == 2:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert3 + hor1))
                elif x == 3:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert1 + hor2))
                elif x == 4:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert2 + hor2))
                elif x == 5:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert3 + hor2))
                elif x == 6:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert1 + hor3))
                elif x == 7:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert2 + hor3))
                elif x == 8:
                    sqr1_1[x] = list(set(sqr1_1[x]) - set(vert3 + hor3))

        if type(sqr1_2[x]) == list:
            if len(sqr1_2[x]) == 1:  # Check if there is only one number left
                sqr1_2[x] = sqr1_2[x][0]  # If so, then replace the list with that single value
            elif len(sqr1_2[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert4 + hor1))
                elif x == 1:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert5 + hor1))
                elif x == 2:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert6 + hor1))
                elif x == 3:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert4 + hor2))
                elif x == 4:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert5 + hor2))
                elif x == 5:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert6 + hor2))
                elif x == 6:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert4 + hor3))
                elif x == 7:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert5 + hor3))
                elif x == 8:
                    sqr1_2[x] = list(set(sqr1_2[x]) - set(vert6 + hor3))

        if type(sqr1_3[x]) == list:
            if len(sqr1_3[x]) == 1:  # Check if there is only one number left
                sqr1_3[x] = sqr1_3[x][0]  # If so, then replace the list with that single value
            elif len(sqr1_3[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert7 + hor1))
                elif x == 1:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert8 + hor1))
                elif x == 2:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert9 + hor1))
                elif x == 3:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert7 + hor2))
                elif x == 4:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert8 + hor2))
                elif x == 5:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert9 + hor2))
                elif x == 6:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert7 + hor3))
                elif x == 7:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert8 + hor3))
                elif x == 8:
                    sqr1_3[x] = list(set(sqr1_3[x]) - set(vert9 + hor3))

        if type(sqr2_1[x]) == list:
            if len(sqr2_1[x]) == 1:  # Check if there is only one number left
                sqr2_1[x] = sqr2_1[x][0]  # If so, then replace the list with that single value
            elif len(sqr2_1[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert1 + hor4))
                elif x == 1:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert2 + hor4))
                elif x == 2:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert3 + hor4))
                elif x == 3:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert1 + hor5))
                elif x == 4:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert2 + hor5))
                elif x == 5:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert3 + hor5))
                elif x == 6:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert1 + hor6))
                elif x == 7:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert2 + hor6))
                elif x == 8:
                    sqr2_1[x] = list(set(sqr2_1[x]) - set(vert3 + hor6))

        if type(sqr2_2[x]) == list:
            if len(sqr2_2[x]) == 1:  # Check if there is only one number left
                sqr2_2[x] = sqr2_2[x][0]  # If so, then replace the list with that single value
            elif len(sqr2_2[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert4 + hor4))
                elif x == 1:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert5 + hor4))
                elif x == 2:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert6 + hor4))
                elif x == 3:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert4 + hor5))
                elif x == 4:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert5 + hor5))
                elif x == 5:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert6 + hor5))
                elif x == 6:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert4 + hor6))
                elif x == 7:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert5 + hor6))
                elif x == 8:
                    sqr2_2[x] = list(set(sqr2_2[x]) - set(vert6 + hor6))

        if type(sqr2_3[x]) == list:
            if len(sqr2_3[x]) == 1:  # Check if there is only one number left
                sqr2_3[x] = sqr2_3[x][0]  # If so, then replace the list with that single value
            elif len(sqr2_3[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert7 + hor4))
                elif x == 1:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert8 + hor4))
                elif x == 2:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert9 + hor4))
                elif x == 3:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert7 + hor5))
                elif x == 4:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert8 + hor5))
                elif x == 5:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert9 + hor5))
                elif x == 6:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert7 + hor6))
                elif x == 7:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert8 + hor6))
                elif x == 8:
                    sqr2_3[x] = list(set(sqr2_3[x]) - set(vert9 + hor6))

        if type(sqr3_1[x]) == list:
            if len(sqr3_1[x]) == 1:  # Check if there is only one number left
                sqr3_1[x] = sqr3_1[x][0]  # If so, then replace the list with that single value
            elif len(sqr3_1[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert1 + hor7))
                elif x == 1:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert2 + hor7))
                elif x == 2:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert3 + hor7))
                elif x == 3:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert1 + hor8))
                elif x == 4:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert2 + hor8))
                elif x == 5:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert3 + hor8))
                elif x == 6:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert1 + hor9))
                elif x == 7:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert2 + hor9))
                elif x == 8:
                    sqr3_1[x] = list(set(sqr3_1[x]) - set(vert3 + hor9))

        if type(sqr3_2[x]) == list:
            if len(sqr3_2[x]) == 1:  # Check if there is only one number left
                sqr3_2[x] = sqr3_2[x][0]  # If so, then replace the list with that single value
            elif len(sqr3_2[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:  # Check if index = 0 to know which row and column to use for elimination
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert4 + hor7))
                elif x == 1:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert5 + hor7))
                elif x == 2:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert6 + hor7))
                elif x == 3:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert4 + hor8))
                elif x == 4:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert5 + hor8))
                elif x == 5:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert6 + hor8))
                elif x == 6:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert4 + hor9))
                elif x == 7:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert5 + hor9))
                elif x == 8:
                    sqr3_2[x] = list(set(sqr3_2[x]) - set(vert6 + hor9))

        if type(sqr3_3[x]) == list:
            if len(sqr3_3[x]) == 1:  # Check if there is only one number left
                sqr3_3[x] = sqr3_3[x][0]  # If so, then replace the list with that single value
            elif len(sqr3_3[x]) > 1:  # If len of list >1 then we need to continue the elimination
                if x == 0:# Check if index = 0 to know which row and column to use for elimination
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert7 + hor7))
                elif x == 1:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert8 + hor7))
                elif x == 2:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert9 + hor7))
                elif x == 3:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert7 + hor8))
                elif x == 4:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert8 + hor8))
                elif x == 5:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert9 + hor8))
                elif x == 6:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert7 + hor9))
                elif x == 7:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert8 + hor9))
                elif x == 8:
                    sqr3_3[x] = list(set(sqr3_3[x]) - set(vert9 + hor9))

print(sqr1_1,sqr1_2,sqr1_3,sqr2_1,sqr2_2,sqr2_3,sqr3_1,sqr3_2,sqr3_3)
